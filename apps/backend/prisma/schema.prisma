generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

// User model to store user information and profile details
model User {
  id               Int       @id @default(autoincrement())
  supabaseId       String    @unique  // Supabase user ID
  email            String    @unique
  fullName         String
  phone            String?
  country          String?
  dateOfBirth      DateTime? // Optional field for DOB
  preferredLang    String    // Preferred language (e.g., 'en', 'fr')
  profilePicture   String?   // Profile picture URL
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  contacts         Contact[] @relation("UserContacts")
  contactOf        Contact[] @relation("ContactUsers")
  createdGroups    Group[]        @relation("CreatedGroups")
  groupMemberships GroupMember[]
  groupMessages    GroupMessage[]
  auth             Auth?     @relation("UserAuth")
}

// Message model to store chat messages between users
model Message {
  id         Int      @id @default(autoincrement())
  content    String   // Original message content
  senderId   Int
  receiverId Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
}

// Contact model to store the relationship between users
model Contact {
  id        Int @id @default(autoincrement())
  userId    Int
  receiverId Int // Renamed to represent the contact or receiver

  user    User @relation("UserContacts", fields: [userId], references: [id])
  receiver User @relation("ContactUsers", fields: [receiverId], references: [id])

  @@unique([userId, receiverId]) // Ensure uniqueness, no duplicate connections
}


// Group model to store group information
model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creatorId   Int       // ID of the user who created the group
  creator     User      @relation("CreatedGroups", fields: [creatorId], references: [id])
  members     GroupMember[]
  messages    GroupMessage[]
}

// GroupMember model to store group memberships
model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    Int
  role      String   @default("MEMBER") // Possible values: ADMIN, MEMBER
  joinedAt  DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

// GroupMessage model to store messages in groups
model GroupMessage {
  id        Int      @id @default(autoincrement())
  content   String
  groupId   Int
  senderId  Int
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  group     Group    @relation(fields: [groupId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

// Auth model for handling authentication providers (via Supabase)
model Auth {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  provider String // e.g., 'email', 'google', etc.
  user     User   @relation("UserAuth", fields: [userId], references: [id])
}



